Folder Structure

your_project/
│
├── images/          # input building images
│   ├── img_001.jpg
│   └── ...
│
├── heatmaps/        # target heatmaps (grayscale, same size as images)
│   ├── img_001.png
│   └── ...



import os
import cv2
import torch
import numpy as np
from torch.utils.data import Dataset, DataLoader
from torchvision import transforms
import torch.nn as nn
import torch.nn.functional as F
import matplotlib.pyplot as plt
from PIL import Image

# --- 1. Dataset Setup ---

class StressDataset(Dataset):
    def __init__(self, image_dir, heatmap_dir, transform=None):
        self.image_dir = image_dir
        self.heatmap_dir = heatmap_dir
        self.transform = transform
        self.images = sorted(os.listdir(image_dir))

    def __len__(self):
        return len(self.images)

    def __getitem__(self, idx):
        img_path = os.path.join(self.image_dir, self.images[idx])
        heatmap_path = os.path.join(self.heatmap_dir, self.images[idx].replace('.jpg', '.png'))

        image = Image.open(img_path).convert('RGB')
        heatmap = Image.open(heatmap_path).convert('L')  # Grayscale

        if self.transform:
            image = self.transform(image)
            heatmap = self.transform(heatmap)

        return image, heatmap


# --- 2. CNN Model for Heatmap Prediction ---

class StressHeatmapNet(nn.Module):
    def __init__(self):
        super().__init__()
        self.enc1 = nn.Sequential(nn.Conv2d(3, 32, 3, padding=1), nn.ReLU())
        self.enc2 = nn.Sequential(nn.Conv2d(32, 64, 3, padding=1), nn.ReLU(), nn.MaxPool2d(2))
        self.enc3 = nn.Sequential(nn.Conv2d(64, 128, 3, padding=1), nn.ReLU(), nn.MaxPool2d(2))
        
        self.up1 = nn.ConvTranspose2d(128, 64, 2, stride=2)
        self.dec1 = nn.Sequential(nn.Conv2d(64, 64, 3, padding=1), nn.ReLU())
        self.up2 = nn.ConvTranspose2d(64, 32, 2, stride=2)
        self.dec2 = nn.Sequential(nn.Conv2d(32, 32, 3, padding=1), nn.ReLU())

        self.out = nn.Conv2d(32, 1, 1)

    def forward(self, x):
        x1 = self.enc1(x)
        x2 = self.enc2(x1)
        x3 = self.enc3(x2)

        x = self.up1(x3)
        x = self.dec1(x)
        x = self.up2(x)
        x = self.dec2(x)

        return torch.sigmoid(self.out(x))


# --- 3. Training Loop ---

def train_model(model, dataloader, epochs=10, lr=1e-3):
    optimizer = torch.optim.Adam(model.parameters(), lr=lr)
    criterion = nn.BCELoss()

    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for imgs, heatmaps in dataloader:
            imgs, heatmaps = imgs.to(device), heatmaps.to(device)
            preds = model(imgs)

            loss = criterion(preds, heatmaps)
            optimizer.zero_grad()
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

        print(f"Epoch {epoch+1}/{epochs} | Loss: {total_loss:.4f}")


# --- 4. Visualize Results ---

def show_heatmap(image_tensor, heatmap_tensor):
    image_np = image_tensor.permute(1, 2, 0).cpu().numpy()
    heatmap_np = heatmap_tensor.squeeze().cpu().numpy()

    plt.figure(figsize=(8, 4))
    plt.subplot(1, 2, 1)
    plt.imshow(image_np)
    plt.title('Input Image')

    plt.subplot(1, 2, 2)
    plt.imshow(image_np, alpha=0.5)
    plt.imshow(heatmap_np, cmap='hot', alpha=0.5)
    plt.title('Predicted Heatmap')
    plt.show()


# --- 5. Run the Full Thing ---

if __name__ == "__main__":
    # Hyperparams
    img_size = 256
    batch_size = 4
    epochs = 20

    transform = transforms.Compose([
        transforms.Resize((img_size, img_size)),
        transforms.ToTensor()
    ])

    dataset = StressDataset('images/', 'heatmaps/', transform=transform)
    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    model = StressHeatmapNet().to(device)

    train_model(model, dataloader, epochs=epochs)

    # Test one image
    model.eval()
    sample_img, _ = dataset[0]
    with torch.no_grad():
        pred_heatmap = model(sample_img.unsqueeze(0).to(device)).squeeze(0)
    show_heatmap(sample_img, pred_heatmap)
